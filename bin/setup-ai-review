#!/bin/bash

# AI Code Review Setup Script
# This script helps set up the GitHub Action for AI code reviews with GitHub Copilot

set -e

echo "🤖 Setting up AI Code Review with GitHub Copilot"
echo "================================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}▶ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "This script must be run from within a git repository"
    exit 1
fi

print_step "Checking GitHub CLI installation..."
if ! command -v gh &> /dev/null; then
    print_error "GitHub CLI (gh) is not installed"
    echo "Please install it from: https://cli.github.com/"
    echo "Or run: brew install gh"
    exit 1
fi
print_success "GitHub CLI found"

print_step "Checking GitHub authentication..."
if ! gh auth status &> /dev/null; then
    print_warning "Not authenticated with GitHub"
    echo "Please run: gh auth login"
    exit 1
fi
print_success "GitHub authenticated"

print_step "Checking repository connection..."
repo_info=$(gh repo view --json name,owner 2>/dev/null || echo "")
if [ -z "$repo_info" ]; then
    print_error "Cannot access repository. Make sure you're in a GitHub repository and have proper permissions"
    exit 1
fi

repo_name=$(echo "$repo_info" | jq -r '.name')
repo_owner=$(echo "$repo_info" | jq -r '.owner.login')
print_success "Connected to repository: $repo_owner/$repo_name"

echo ""
echo "� Checking GitHub Copilot Access"
echo "================================="

# Check if GitHub Copilot is available
print_step "Checking GitHub Copilot CLI access..."
if command -v gh &> /dev/null; then
    if gh copilot --help &> /dev/null 2>&1; then
        print_success "GitHub Copilot CLI is available"
    else
        print_warning "GitHub Copilot CLI extension not found"
        echo "Installing GitHub Copilot CLI extension..."
        gh extension install github/gh-copilot || print_warning "Could not install Copilot CLI extension"
    fi
else
    print_warning "GitHub CLI not found - Copilot CLI features may not work"
fi

# Check GitHub Copilot subscription
print_step "Checking GitHub Copilot subscription..."
copilot_status=$(gh api user/copilot_seat_management 2>/dev/null || echo "not_available")
if [ "$copilot_status" != "not_available" ]; then
    print_success "GitHub Copilot subscription detected"
else
    print_warning "GitHub Copilot subscription not detected"
    echo "Note: The workflow will use fallback analysis based on static tools"
fi

print_step "Checking GITHUB_TOKEN availability..."
print_success "GITHUB_TOKEN will be automatically provided by GitHub Actions"
print_success "No additional secrets configuration required for GitHub Copilot"

echo ""
echo "🔍 Verifying Workflow Files"
echo "==========================="

# Check if workflow file exists
workflow_file=".github/workflows/copilot-code-review.yml"
if [ -f "$workflow_file" ]; then
    print_success "AI code review workflow file found"
else
    print_error "Workflow file not found: $workflow_file"
    exit 1
fi

# Check if standards file exists
standards_file=".github/AI_REVIEW_STANDARDS.md"
if [ -f "$standards_file" ]; then
    print_success "AI review standards file found"
else
    print_error "Standards file not found: $standards_file"
    exit 1
fi

echo ""
echo "🧪 Testing Configuration"
echo "======================="

print_step "Validating workflow YAML..."
# Try Python YAML validation first
if python3 -c "import yaml; yaml.safe_load(open('$workflow_file'))" 2>/dev/null; then
    print_success "Workflow YAML is valid"
# Fallback to Ruby YAML validation if available
elif command -v ruby &> /dev/null && ruby -e "require 'yaml'; YAML.load_file('$workflow_file')" 2>/dev/null; then
    print_success "Workflow YAML is valid (verified with Ruby)"
else
    print_error "Workflow YAML is invalid or cannot be validated"
    exit 1
fi

print_step "Checking Python dependencies..."
if ! python3 -c "import requests" 2>/dev/null; then
    print_warning "Python 'requests' library not found locally"
    echo "This is OK - it will be installed in the GitHub Action"
else
    print_success "Python dependencies available locally"
fi

echo ""
echo "📋 Setup Summary"
echo "==============="
print_success "✅ Repository: $repo_owner/$repo_name"
print_success "✅ GitHub CLI authenticated"
print_success "✅ GitHub Copilot checked"
print_success "✅ Workflow file: $workflow_file"
print_success "✅ Standards file: $standards_file"

echo ""
echo "🚀 Next Steps"
echo "============"
echo "1. Commit and push the workflow files:"
echo "   git add .github/"
echo "   git commit -m 'feat: add AI code review with GitHub Copilot'"
echo "   git push"
echo ""
echo "2. Create a test pull request to verify the workflow"
echo ""
echo "3. The AI review will run automatically on all future PRs"
echo ""
echo "📖 Documentation:"
echo "- Workflow: $workflow_file"
echo "- Standards: $standards_file"
echo "- GitHub Actions: https://github.com/$repo_owner/$repo_name/actions"

echo ""
print_step "Testing GitHub Copilot access (optional)..."
read -p "Do you want to test GitHub Copilot CLI access now? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if command -v gh &> /dev/null && gh copilot --help &> /dev/null 2>&1; then
        print_step "Testing Copilot suggest command..."
        
        # Test the Copilot CLI with a simple request
        test_result=$(gh copilot suggest --type shell "echo hello world" 2>&1 || echo "failed")
        
        if [[ $test_result != *"failed"* ]]; then
            print_success "GitHub Copilot CLI test successful!"
        else
            print_warning "GitHub Copilot CLI test failed - fallback analysis will be used"
            echo "This is OK - the workflow will still work with static analysis"
        fi
    else
        print_warning "GitHub Copilot CLI not available for testing"
        echo "The workflow will use fallback analysis based on RuboCop, Brakeman, and test results"
    fi
fi

echo ""
print_success "🎉 AI Code Review setup complete!"
echo ""
echo "The workflow will now analyze all pull requests using GitHub Copilot"
echo "and provide detailed feedback based on your project's coding standards."
echo ""
echo "Note: If GitHub Copilot is not available, the system will automatically"
echo "fall back to intelligent analysis based on RuboCop, Brakeman, and test results."
