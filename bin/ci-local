#!/bin/bash
# Local CI simulation script
# This script runs the same checks that CircleCI will run

set -e

echo "🚀 Running Local CI Simulation..."
echo "=================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    if [ "$status" = "SUCCESS" ]; then
        echo -e "${GREEN}✅ $message${NC}"
    elif [ "$status" = "FAILURE" ]; then
        echo -e "${RED}❌ $message${NC}"
    else
        echo -e "${YELLOW}⚠️  $message${NC}"
    fi
}

# Create results directories
mkdir -p tmp/{test,security,lint,quality}-results

# Step 1: Install dependencies
echo "📦 Installing dependencies..."
if bundle install --quiet; then
    print_status "SUCCESS" "Dependencies installed"
else
    print_status "FAILURE" "Failed to install dependencies"
    exit 1
fi

# Step 2: Run RuboCop
echo ""
echo "🔍 Running RuboCop linting..."
if bundle exec rubocop --format simple > tmp/lint-results/rubocop.txt 2>&1; then
    print_status "SUCCESS" "RuboCop passed"
    cat tmp/lint-results/rubocop.txt
else
    print_status "FAILURE" "RuboCop found issues"
    cat tmp/lint-results/rubocop.txt
    echo "Run 'bundle exec rubocop --auto-correct' to fix automatically correctable issues"
fi

# Step 3: Run Brakeman
echo ""
echo "🔒 Running Brakeman security analysis..."
if bundle exec brakeman --force --quiet --format plain > tmp/security-results/brakeman.txt 2>&1; then
    if grep -q "No warnings found" tmp/security-results/brakeman.txt; then
        print_status "SUCCESS" "Brakeman security check passed"
        echo "No security issues found!"
    else
        print_status "WARNING" "Brakeman found potential security issues"
        cat tmp/security-results/brakeman.txt
    fi
else
    print_status "WARNING" "Brakeman analysis completed with warnings"
    cat tmp/security-results/brakeman.txt
fi

# Step 4: Run tests with coverage
echo ""
echo "🧪 Running RSpec tests with coverage..."
if COVERAGE=true bundle exec rspec --format progress > tmp/test-results/rspec.txt 2>&1; then
    print_status "SUCCESS" "All tests passed"
    
    # Show coverage summary
    if [ -f coverage/.last_run.json ]; then
        echo ""
        echo "📊 Coverage Summary:"
        if command -v jq >/dev/null 2>&1; then
            coverage_pct=$(jq -r '.result.line' coverage/.last_run.json 2>/dev/null || echo "N/A")
            echo "Line Coverage: $coverage_pct%"
        else
            echo "Coverage report generated (install 'jq' for percentage display)"
        fi
        echo "HTML report: coverage/index.html"
    fi
else
    print_status "FAILURE" "Some tests failed"
    tail -n 20 tmp/test-results/rspec.txt
    exit 1
fi

# Step 5: Summary
echo ""
echo "🎉 Local CI Simulation Complete!"
echo "=================================="
print_status "SUCCESS" "All checks completed"
echo ""
echo "📁 Results saved in tmp/ directory:"
echo "   - tmp/test-results/rspec.txt"
echo "   - tmp/lint-results/rubocop.txt" 
echo "   - tmp/security-results/brakeman.txt"
echo "   - coverage/index.html"
echo ""
echo "🔗 Your project is ready for CircleCI!"
