#!/usr/bin/env ruby
# frozen_string_literal: true

# CI Quality Checker
# Runs comprehensive quality checks including linting, security, and tests

require 'fileutils'
require_relative 'ci_logger'

class CIQualityChecker
  attr_reader :logger, :results_dir, :summary_file

  def initialize(logger: CILogger, results_dir: 'tmp/quality-results')
    @logger = logger
    @results_dir = results_dir
    @summary_file = "#{results_dir}/quality-summary.txt"
  end

  def run
    logger.info('Starting comprehensive code quality analysis...')

    setup_directories
    run_quality_checks

    logger.success('Quality analysis completed!')
    display_final_summary
  end

  private

  def setup_directories
    logger.step('Creating quality results directory...')
    FileUtils.mkdir_p(results_dir)
    logger.file_operation('Created directory', results_dir)
  end

  def run_quality_checks
    File.open(summary_file, 'w') do |summary|
      summary.puts 'Comprehensive Code Quality Analysis Report'
      summary.puts '=' * 50
      summary.puts "Generated at: #{Time.now}"
      summary.puts ''

      run_rubocop_check(summary)
      run_brakeman_check(summary)
      run_test_check(summary)
    end
  end

  def run_rubocop_check(summary)
    logger.step('Running RuboCop analysis...')

    summary.puts '=== RuboCop Analysis ==='
    summary.flush

    rubocop_command = 'bundle exec rubocop --format simple'

    logger.debug("Executing command: #{rubocop_command}")
    success = system("#{rubocop_command} | tee -a #{summary_file}")

    logger.command(rubocop_command, success: success)

    if success
      logger.success('RuboCop: No violations found')
    else
      logger.warning('RuboCop: Style violations detected')
    end

    summary.puts ''
  end

  def run_brakeman_check(summary)
    logger.step('Running Brakeman security analysis...')

    summary.puts '=== Brakeman Security Analysis ==='
    summary.flush

    brakeman_command = 'bundle exec brakeman --force --quiet --format plain'

    logger.debug("Executing command: #{brakeman_command}")
    # Brakeman may exit with non-zero for warnings, so we don't check return status
    system("#{brakeman_command} | tee -a #{summary_file}")

    logger.success('Brakeman analysis completed')

    summary.puts ''
  end

  def run_test_check(summary)
    logger.step('Running tests with coverage...')

    summary.puts '=== Test Suite with Coverage ==='
    summary.flush

    test_command = 'COVERAGE=true bundle exec rspec --format progress'

    logger.debug("Executing command: #{test_command}")
    success = system("#{test_command} | tee -a #{summary_file}")

    logger.command(test_command, success: success)

    if success
      logger.success('All tests passed')
    else
      logger.error('Some tests failed')
      exit(1) # Fail the CI if tests fail
    end

    summary.puts ''
  end

  def display_final_summary
    logger.section('QUALITY ANALYSIS SUMMARY')

    if File.exist?(summary_file)
      # Display last few lines of summary for quick overview
      summary_lines = File.readlines(summary_file)
      if summary_lines.size > 20
        logger.info('... (see full report in artifacts) ...')
        summary_lines.last(10).each { |line| logger.indent(line.chomp) }
      else
        File.read(summary_file).lines.each { |line| logger.indent(line.chomp) }
      end
    end

    logger.file_operation('Full quality report saved to', summary_file)
  end
end

# Run the quality checker if this script is executed directly
CIQualityChecker.new.run if __FILE__ == $PROGRAM_NAME
