#!/usr/bin/env ruby
# frozen_string_literal: true

# CI Security Scanner
# Runs Brakeman security analysis with multiple output formats

require 'fileutils'
require 'json'
require_relative 'ci_logger'

class CISecurityScanner
  attr_reader :logger, :results_dir

  def initialize(logger: CILogger, results_dir: 'tmp/security-results')
    @logger = logger
    @results_dir = results_dir
  end

  def run
    logger.info('Starting security analysis...')

    setup_directories
    run_brakeman_analysis
    violations = display_security_summary

    if violations.positive?
      logger.error("Exiting with failure due to #{violations} security violations")
      exit(1)
    end

    logger.success('Security analysis completed!')
  end

  private

  def setup_directories
    logger.step('Creating security results directory...')
    FileUtils.mkdir_p(results_dir)
    logger.file_operation('Created directory', results_dir)
  end

  def run_brakeman_analysis
    logger.step('Running Brakeman security analysis...')

    # Run Brakeman for each output format separately to avoid conflicts
    formats = {
      'json' => 'brakeman.json',
      'plain' => 'brakeman.txt',
      'html' => 'brakeman.html'
    }

    success = true
    formats.each do |format, filename|
      command = "bundle exec brakeman --force --format #{format} --output #{results_dir}/#{filename} --quiet"
      logger.debug("Executing command: #{command}")
      result = system(command)
      logger.command(command, success: result)
      success = false unless result
    end

    if success
      logger.success('Brakeman analysis completed')
    else
      logger.warning('Brakeman analysis completed with issues')
    end
    success
  end

  def display_security_summary
    logger.section('Brakeman Security Analysis Summary')

    if File.exist?("#{results_dir}/brakeman.txt")
      content = File.read("#{results_dir}/brakeman.txt")
      content.lines.each { |line| logger.indent(line.chomp) }

      # Count warnings from the text output
      warning_match = content.scan(/\d+ warning/).join.scan(/\d+/).first
      warning_match ? warning_match.to_i : 0
    elsif File.exist?("#{results_dir}/brakeman.json")
      display_json_summary
    else
      logger.success('No security issues found!')
      0
    end
  end

  def display_json_summary
    json_data = JSON.parse(File.read("#{results_dir}/brakeman.json"))

    warning_count = 0
    if json_data['warnings']&.any?
      warning_count = json_data['warnings'].size
      logger.warning("Found #{warning_count} security warnings")
      json_data['warnings'].first(3).each_with_index do |warning, index|
        logger.indent("#{index + 1}. #{warning['warning_type']}: #{warning['message']}")
      end
      logger.indent('... see full report for details') if warning_count > 3
    else
      logger.success('No security warnings found!')
    end

    logger.error("Found #{json_data['errors'].size} errors during analysis") if json_data['errors']&.any?

    warning_count
  rescue JSON::ParserError => e
    logger.error("Could not parse Brakeman JSON output: #{e.message}")
    0
  end
end

# Run the security scanner if this script is executed directly
CISecurityScanner.new.run if __FILE__ == $PROGRAM_NAME
