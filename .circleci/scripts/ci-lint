#!/usr/bin/env ruby
# frozen_string_literal: true

# CI Linter
# Runs RuboCop linting with multiple output formats

require 'fileutils'
require 'json'
require_relative 'ci_logger'

class CILinter
  attr_reader :logger, :results_dir

  def initialize(logger: CILogger, results_dir: 'tmp/lint-results')
    @logger = logger
    @results_dir = results_dir
  end

  def run
    logger.info('Starting code linting analysis...')

    setup_directories
    run_rubocop_analysis
    offense_count = display_lint_summary

    if offense_count.positive?
      logger.error("Exiting with failure due to #{offense_count} style violations")
      exit(1)
    end

    logger.success('Linting analysis completed!')
  end

  private

  def setup_directories
    logger.step('Creating lint results directory...')
    FileUtils.mkdir_p(results_dir)
    logger.file_operation('Created directory', results_dir)
  end

  def run_rubocop_analysis
    logger.step('Running RuboCop linting...')

    rubocop_command = [
      'bundle exec rubocop',
      '--format progress',
      '--format json',
      "--out #{results_dir}/rubocop.json",
      '--format html',
      "--out #{results_dir}/rubocop.html"
    ].join(' ')

    logger.debug("Executing command: #{rubocop_command}")
    success = system(rubocop_command)

    logger.command(rubocop_command, success: success)

    if success
      logger.success('RuboCop analysis completed without violations')
    else
      logger.warning('RuboCop found style violations (this may not be a failure)')
    end
  end

  def display_lint_summary
    logger.section('RuboCop Analysis Summary')

    if File.exist?("#{results_dir}/rubocop.json")
      display_json_summary
    else
      logger.info('RuboCop analysis completed - see artifacts for details')
      0 # No offense count available
    end
  end

  def display_json_summary
    json_data = JSON.parse(File.read("#{results_dir}/rubocop.json"))

    if json_data['summary']
      summary = json_data['summary']
      logger.stat('Files inspected', summary['inspected_file_count'])
      logger.stat('Offenses found', summary['offense_count'], good: summary['offense_count'].zero?)

      if summary['offense_count'].positive?
        logger.warning("Found #{summary['offense_count']} style violations")

        # Show offense breakdown by severity
        offenses_by_severity = {}
        json_data['files']&.each do |file|
          file['offenses']&.each do |offense|
            severity = offense['severity']
            offenses_by_severity[severity] = (offenses_by_severity[severity] || 0) + 1
          end
        end

        offenses_by_severity.each do |severity, count|
          logger.indent("#{severity.capitalize}: #{count}")
        end
      else
        logger.success('No style violations found!')
      end

      summary['offense_count']
    else
      logger.info('RuboCop analysis completed')
      0 # No summary available
    end
  rescue JSON::ParserError => e
    logger.error("Could not parse RuboCop JSON output: #{e.message}")
    0 # Assume no offenses if we can't parse
  end
end

# Run the linter if this script is executed directly
CILinter.new.run if __FILE__ == $PROGRAM_NAME
