#!/usr/bin/env ruby
# frozen_string_literal: true

# CI Runner - Master script to run all CI checks locally
# This allows developers to run the same checks locally that run in CI

require 'optparse'
require_relative 'ci_logger'

class CIRunner
  attr_reader :logger, :checks_to_run, :verbose

  AVAILABLE_CHECKS = {
    'test' => 'Run tests with coverage',
    'security' => 'Run security analysis with Brakeman',
    'lint' => 'Run code linting with RuboCop',
    'quality' => 'Run comprehensive quality checks (includes all checks in one report)',
    'all' => 'Run all individual checks separately',
    'comprehensive' => 'Run comprehensive quality analysis (same as quality)'
  }.freeze

  def initialize(logger: CILogger)
    @logger = logger
    @checks_to_run = []
    @verbose = false
    parse_options
  end

  def run
    if checks_to_run.empty?
      logger.warning('No checks specified. Use --help to see available options.')
      return
    end

    logger.info("Starting CI checks: #{checks_to_run.join(', ')}")
    logger.section('CI Pipeline Execution')

    success = true

    checks_to_run.each do |check|
      success = case check
                when 'all'
                  run_all_individual_checks && success
                when 'comprehensive', 'quality'
                  run_single_check('quality') && success
                else
                  run_single_check(check) && success
                end
    end

    if success
      logger.success('All CI checks completed successfully!')
      logger.info('Results are available in the tmp/ directory.')
    else
      logger.error('Some CI checks failed!')
      exit(1)
    end
  end

  private

  def parse_options
    parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options] CHECK [CHECK...]"
      opts.separator ''
      opts.separator 'Available checks:'

      AVAILABLE_CHECKS.each do |check, description|
        opts.separator "  #{check.ljust(12)} - #{description}"
      end

      opts.separator ''
      opts.separator 'Options:'

      opts.on('-v', '--verbose', 'Verbose output') do
        @verbose = true
      end

      opts.on('-h', '--help', 'Show this help message') do
        puts opts
        exit
      end
    end

    begin
      parser.parse!
      @checks_to_run = ARGV.dup

      if @checks_to_run.empty?
        puts parser
        exit
      end

      # Validate check names
      invalid_checks = @checks_to_run - AVAILABLE_CHECKS.keys
      unless invalid_checks.empty?
        logger.error("Invalid checks: #{invalid_checks.join(', ')}")
        logger.info("Available checks: #{AVAILABLE_CHECKS.keys.join(', ')}")
        exit(1)
      end
    rescue OptionParser::InvalidOption => e
      logger.error(e.message)
      puts parser
      exit(1)
    end
  end

  def run_all_individual_checks
    # Run individual checks separately (test, security, lint)
    # Skip quality since it would duplicate the individual checks
    checks = %w[test security lint]
    success = true

    checks.each do |check|
      success = run_single_check(check) && success
    end

    success
  end

  def run_single_check(check)
    script_path = ".circleci/scripts/ci-#{check}"

    unless File.exist?(script_path) && File.executable?(script_path)
      logger.error("Script not found or not executable: #{script_path}")
      return false
    end

    logger.step("Running: #{check.upcase}")
    logger.debug("Executing script: #{script_path}")

    start_time = Time.now
    success = system(script_path)
    end_time = Time.now

    duration = (end_time - start_time).round(2)

    logger.command(script_path, success: success)

    if success
      logger.success("#{check.upcase} completed successfully (#{duration}s)")
    else
      logger.error("#{check.upcase} failed (#{duration}s)")
    end

    success
  end
end

# Show usage if no arguments provided
if ARGV.empty?
  puts 'CI Runner - Run CI checks locally'
  puts ''
  puts "Usage: #{$PROGRAM_NAME} [options] CHECK [CHECK...]"
  puts ''
  puts 'Examples:'
  puts "  #{$PROGRAM_NAME} test           # Run only tests"
  puts "  #{$PROGRAM_NAME} lint security  # Run linting and security checks"
  puts "  #{$PROGRAM_NAME} all            # Run all checks"
  puts ''
  puts 'Use --help for more options.'
  exit
end

# Run the CI runner if this script is executed directly
CIRunner.new.run if __FILE__ == $PROGRAM_NAME
