#!/usr/bin/env ruby
# frozen_string_literal: true

# CI Test Runner
# Runs RSpec tests with coverage and generates test results

require 'fileutils'

class CITestRunner
  def initialize
    @results_dir = 'tmp/test-results'
    @coverage_enabled = ENV['COVERAGE'] == 'true'
  end

  def run
    puts 'Starting CI test runner...'

    setup_directories
    run_tests
    generate_coverage_summary

    puts 'Test run completed successfully!'
  end

  private

  def setup_directories
    puts 'Creating test results directory...'
    FileUtils.mkdir_p(@results_dir)
  end

  def run_tests
    puts 'Running RSpec tests with coverage...'

    rspec_command = [
      'bundle exec rspec',
      '--format progress',
      '--format RspecJunitFormatter',
      "--out #{@results_dir}/rspec.xml"
    ].join(' ')

    env_vars = @coverage_enabled ? { 'COVERAGE' => 'true' } : {}

    success = system(env_vars, rspec_command)

    unless success
      puts '❌ Tests failed!'
      exit(1)
    end

    puts '✅ Tests passed!'
  end

  def generate_coverage_summary
    puts 'Generating coverage summary...'

    summary_file = "#{@results_dir}/coverage-summary.txt"
    File.open(summary_file, 'w') do |f|
      f.puts 'Coverage Summary:'

      if File.exist?('coverage/.last_run.json')
        f.puts 'Coverage data found in coverage/.last_run.json'

        # Extract coverage percentage if jq is available
        if system('command -v jq >/dev/null 2>&1')
          coverage_result = `jq -r '.result.line' coverage/.last_run.json 2>/dev/null`.strip
          f.puts "Line Coverage: #{coverage_result}%" unless coverage_result.empty?
        end
      end

      f.puts 'HTML coverage report generated at coverage/index.html' if File.exist?('coverage/index.html')
    end

    puts "Coverage summary saved to #{summary_file}"
  end
end

# Run the test runner if this script is executed directly
CITestRunner.new.run if __FILE__ == $PROGRAM_NAME
