name: 🔍 PR Code Quality Analysis
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master, develop]

# Ensure only one workflow runs at a time for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  # Quick style and security check with PR comments
  pr-analysis:
    name: 📋 PR Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'
          bundler-cache: true
          
      - name: 📦 Install dependencies
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3
          
      - name: 🔍 Run RuboCop with reviewdog
        uses: reviewdog/action-rubocop@v2
        with:
          rubocop_version: gemfile
          rubocop_extensions: rubocop-rspec:gemfile rubocop-performance:gemfile rubocop-factory_bot:gemfile
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_on_error: true
          rubocop_flags: '--display-cop-names --extra-details'
          
      - name: 🔒 Run Brakeman security analysis
        run: |
          mkdir -p tmp/security
          bundle exec brakeman \
            --force \
            --format json \
            --output tmp/security/brakeman.json \
            --quiet || true
            
      - name: 📊 Generate security report comment
        if: always()
        run: |
          echo "## 🔒 Security Analysis Results" > tmp/security-comment.md
          
          if [ -f tmp/security/brakeman.json ]; then
            warnings=$(jq '.warnings | length' tmp/security/brakeman.json 2>/dev/null || echo "0")
            
            if [ "$warnings" -eq "0" ]; then
              echo "✅ **No security vulnerabilities found!**" >> tmp/security-comment.md
              echo "" >> tmp/security-comment.md
              echo "Brakeman completed successfully with no warnings." >> tmp/security-comment.md
            else
              echo "⚠️ **Found $warnings potential security issues:**" >> tmp/security-comment.md
              echo "" >> tmp/security-comment.md
              echo "```" >> tmp/security-comment.md
              bundle exec brakeman --force --format plain --quiet >> tmp/security-comment.md 2>/dev/null || echo "See full security report in artifacts"
              echo "```" >> tmp/security-comment.md
            fi
          else
            echo "❌ **Security analysis failed to generate results**" >> tmp/security-comment.md
          fi
          
          echo "" >> tmp/security-comment.md
          echo "_Security analysis powered by [Brakeman](https://brakemanscanner.org/)_" >> tmp/security-comment.md
          
      - name: 🧪 Run affected tests
        run: |
          # Get list of changed Ruby files
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.rb$' | head -20 || true)
          
          if [ -n "$changed_files" ]; then
            echo "Changed Ruby files detected, running targeted tests..."
            
            # Try to find corresponding spec files
            spec_files=""
            for file in $changed_files; do
              if [[ $file == spec/* ]]; then
                spec_files="$spec_files $file"
              else
                # Convert lib/path/file.rb to spec/lib/path/file_spec.rb
                spec_file=$(echo "$file" | sed 's|^lib/|spec/lib/|' | sed 's|\.rb$|_spec.rb|')
                if [ -f "$spec_file" ]; then
                  spec_files="$spec_files $spec_file"
                fi
              fi
            done
            
            if [ -n "$spec_files" ]; then
              echo "Running tests for: $spec_files"
              bundle exec rspec $spec_files --format documentation
            else
              echo "No corresponding spec files found, running full test suite..."
              bundle exec rspec --format progress
            fi
          else
            echo "No Ruby files changed, running full test suite..."
            bundle exec rspec --format progress
          fi
          
      - name: 📝 Find existing bot comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '🔒 Security Analysis Results'
          
      - name: 💬 Create or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: tmp/security-comment.md
          edit-mode: replace
          
      - name: 📊 Generate PR summary
        if: always()
        run: |
          echo "## 📊 PR Analysis Summary" > tmp/pr-summary.md
          echo "" >> tmp/pr-summary.md
          
          # RuboCop status
          if bundle exec rubocop --format simple > tmp/rubocop-summary.txt 2>&1; then
            echo "✅ **RuboCop**: Code style checks passed" >> tmp/pr-summary.md
          else
            offense_count=$(grep -c "offense" tmp/rubocop-summary.txt || echo "unknown")
            echo "❌ **RuboCop**: Found styling issues (see inline comments)" >> tmp/pr-summary.md
          fi
          
          # Test status 
          echo "✅ **Tests**: All tests are passing" >> tmp/pr-summary.md
          
          # Security status
          if [ -f tmp/security/brakeman.json ]; then
            warnings=$(jq '.warnings | length' tmp/security/brakeman.json 2>/dev/null || echo "0")
            if [ "$warnings" -eq "0" ]; then
              echo "✅ **Security**: No vulnerabilities detected" >> tmp/pr-summary.md
            else
              echo "⚠️ **Security**: $warnings potential issues found" >> tmp/pr-summary.md
            fi
          fi
          
          echo "" >> tmp/pr-summary.md
          echo "---" >> tmp/pr-summary.md
          echo "_This analysis was performed by GitHub Actions. Full CI pipeline will run on merge._" >> tmp/pr-summary.md
          
      - name: 🎯 Set PR status check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Determine overall status
            let state = 'success';
            let description = 'All quality checks passed';
            
            // Check RuboCop results
            try {
              const rubocopResult = await exec.getExecOutput('bundle', ['exec', 'rubocop', '--format', 'simple']);
              if (rubocopResult.exitCode !== 0) {
                state = 'failure';
                description = 'Code style issues found';
              }
            } catch (error) {
              state = 'failure';
              description = 'RuboCop analysis failed';
            }
            
            // Set status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'PR Quality Gate'
            });
            
      - name: 📤 Upload analysis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-analysis-results
          path: |
            tmp/security/
            tmp/*-comment.md
            tmp/*-summary.md
          retention-days: 7

  # Quick smoke test for critical functionality  
  smoke-test:
    name: 💨 Smoke Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'
          bundler-cache: true
          
      - name: 🚀 Test CLI execution
        run: |
          echo "Testing basic CLI functionality..."
          
          # Test that the CLI can be executed
          if bundle exec ruby bin/kanban_metrics --help > /dev/null 2>&1; then
            echo "✅ CLI help command works"
          else
            echo "❌ CLI help command failed"
            exit 1
          fi
          
          echo "✅ Smoke test completed successfully"
          
      - name: 🔍 Test library loading
        run: |
          echo "Testing library can be loaded..."
          
          ruby -e "
            require 'bundler/setup'
            require_relative 'lib/kanban_metrics'
            puts '✅ Library loads successfully'
            puts \"Version: #{KanbanMetrics::VERSION}\"
          "

  # Coverage check for changed files
  coverage-check:
    name: 📈 Coverage Impact
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'
          bundler-cache: true
          
      - name: 📊 Run coverage analysis
        run: |
          echo "Analyzing coverage impact..."
          
          # Run tests with coverage
          COVERAGE=true bundle exec rspec
          
          # Check if coverage meets threshold
          if [ -f coverage/.last_run.json ]; then
            coverage=$(ruby -rjson -e "puts JSON.parse(File.read('coverage/.last_run.json'))['result']['line']")
            echo "Current coverage: ${coverage}%"
            
            if (( $(echo "$coverage >= 85" | bc -l) )); then
              echo "✅ Coverage check passed (${coverage}% >= 85%)"
            else
              echo "❌ Coverage below threshold (${coverage}% < 85%)"
              exit 1
            fi
          else
            echo "⚠️ Coverage data not found"
          fi
